{"version":3,"sources":["js/weather.js"],"names":["weather","KEY_API","weatherText","document","querySelector","getWeather","latitude","longitude","fetch","API_WEATHER","then","response","ok","json","console","error","status","text","dir","temp","main","name","innerText","handleGeoSuccess","position","coords","log","localStorage","setItem","JSON","stringify","handleGeoError","askForCoords","navigator","geolocation","getCurrentPosition","loadedCoords","getItem","parse","loadCoords"],"mappings":";AAAA,IAAMA,EAAU,WACRC,IAIAC,EAAcC,SAASC,cAAc,kBAErCC,EAAa,SAA6B,GAA1BC,IAAAA,EAAAA,EAAAA,SAAUC,EAAAA,EAAAA,UAC9BC,MACKC,GAAAA,OAPa,mDAOKH,QAAAA,OAAAA,EAAgBC,SAAAA,OAAAA,EAAmBN,WAAAA,OAR5C,mCAOd,kBAGGS,KAAK,SAACC,GACD,OAACA,EAASC,GAKPD,EAASE,QAJdC,QAAQC,MAAeJ,SAAAA,OAAAA,EAASK,OAAhC,OACAL,EAASM,OAAOP,KAAKI,QAAQC,OACtB,QAIVL,KAAK,SAACG,GACD,GAACA,EAAD,CAGJC,QAAQI,IAAIL,GAEFM,IAAAA,EAENN,EAFFO,KAAQD,KACRE,EACER,EADFQ,KAEFnB,EAAYoB,UAAeH,GAAAA,OAAAA,EAAYE,SAAAA,OAAAA,OAmBvCE,EAAmB,SAACC,GACQA,IAhBdC,EAgBcD,EAAAA,EAASC,OAAjCnB,EAAAA,EAAAA,SAAUC,EAAAA,EAAAA,UAhBAkB,EAiBP,CAAEnB,SAAAA,EAAUC,UAAAA,GAhBvBO,QAAQY,IAAID,GACZE,aAAaC,QA/BI,SA+BgBC,KAAKC,UAAUL,IAgBhDpB,EAAW,CAAEC,SAAAA,EAAUC,UAAAA,KAGnBwB,EAAiB,WACrBjB,QAAQY,IAAI,kCAGRM,EAAe,WACnBC,UAAUC,YAAYC,mBAAmBZ,EAAkBQ,KArB1C,WACXK,IAAAA,EAAeT,aAAaU,QAnCjB,UAoCb,GAACD,EAEE,CAC2BP,IAAAA,EAAAA,KAAKS,MAAMF,GAAnC9B,EAAAA,EAAAA,SAAUC,EAAAA,EAAAA,UAClBF,EAAW,CAAEC,SAAAA,EAAUC,UAAAA,SAHvByB,IAsBFO,IAIJvC","file":"weather.9bdf7e24.js","sourceRoot":"..","sourcesContent":["const weather = () => {\r\n  const KEY_API = \"61a01aaac4701a654677024dbf60e048\";\r\n  const API_WEATHER = \"https://api.openweathermap.org/data/2.5/weather?\";\r\n  const KEY_COORDS = \"coords\";\r\n\r\n  const weatherText = document.querySelector(\".weather__text\");\r\n\r\n  const getWeather = ({ latitude, longitude }) => {\r\n    fetch(\r\n      `${API_WEATHER}lat=${latitude}&lon=${longitude}&appid=${KEY_API}&units=metric`\r\n    )\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          console.error(`Error ${response.status}\\n`);\r\n          response.text().then(console.error);\r\n          return null;\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((json) => {\r\n        if (!json) {\r\n          return;\r\n        }\r\n        console.dir(json);\r\n        const {\r\n          main: { temp },\r\n          name\r\n        } = json;\r\n        weatherText.innerText = `${temp}Â°C @ ${name}`;\r\n      });\r\n  };\r\n\r\n  const saveCoords = (coords) => {\r\n    console.log(coords);\r\n    localStorage.setItem(KEY_COORDS, JSON.stringify(coords));\r\n  };\r\n\r\n  const loadCoords = () => {\r\n    const loadedCoords = localStorage.getItem(KEY_COORDS);\r\n    if (!loadedCoords) {\r\n      askForCoords();\r\n    } else {\r\n      const { latitude, longitude } = JSON.parse(loadedCoords);\r\n      getWeather({ latitude, longitude });\r\n    }\r\n  };\r\n\r\n  const handleGeoSuccess = (position) => {\r\n    const { latitude, longitude } = position.coords;\r\n    saveCoords({ latitude, longitude });\r\n    getWeather({ latitude, longitude });\r\n  };\r\n\r\n  const handleGeoError = () => {\r\n    console.log(\"Failed to access geo location\");\r\n  };\r\n\r\n  const askForCoords = () => {\r\n    navigator.geolocation.getCurrentPosition(handleGeoSuccess, handleGeoError);\r\n  };\r\n\r\n  const init = () => {\r\n    loadCoords();\r\n  };\r\n  init();\r\n};\r\nweather();\r\n"]}